mutate(Class = "Overall") %>%
select(4, 1:3)
data_summary_overall
# Summarize sample size, average, std deviation by Class
data_summary_section <- data_test1 %>%
group_by(Class) %>%
summarize(Size = n(),
Avg = mean(Test_1),
Std_Dev = sd(Test_1))
data_summary_section
#Combine the summaries into one
data_summaries <- data_summary_overall %>%
inner_join(data_summary_section, join_by(Class))
data_summaries
#Create a test 1 dataset
data_test1 <- data_long %>%
select(Student, Class, Test_1)
#data_test1
# Summarize sample size, average, std deviation
data_summary_overall <- data_test1 %>%
summarize(Size = n(),
Avg = mean(Test_1),
Std_Dev = sd(Test_1))%>%
mutate(Class = "Overall") %>%
select(4, 1:3)
data_summary_overall
# Summarize sample size, average, std deviation by Class
data_summary_section <- data_test1 %>%
group_by(Class) %>%
summarize(Size = n(),
Avg = mean(Test_1),
Std_Dev = sd(Test_1))
data_summary_section
#Combine the summaries into one
data_summaries <- data_summary_overall %>%
join(data_summary_section, join_by(Class))
#Create a test 1 dataset
data_test1 <- data_long %>%
select(Student, Class, Test_1)
#data_test1
# Summarize sample size, average, std deviation
data_summary_overall <- data_test1 %>%
summarize(Size = n(),
Avg = mean(Test_1),
Std_Dev = sd(Test_1))%>%
mutate(Class = "Overall") %>%
select(4, 1:3)
data_summary_overall
# Summarize sample size, average, std deviation by Class
data_summary_section <- data_test1 %>%
group_by(Class) %>%
summarize(Size = n(),
Avg = mean(Test_1),
Std_Dev = sd(Test_1))
data_summary_section
#Combine the summaries into one
data_summaries <- data_summary_overall %>%
left_join(data_summary_section, join_by(Class))
data_summaries
#Create a test 1 dataset
data_test1 <- data_long %>%
select(Student, Class, Test_1)
#data_test1
# Summarize sample size, average, std deviation
data_summary_overall <- data_test1 %>%
summarize(Size = n(),
Avg = mean(Test_1),
Std_Dev = sd(Test_1))%>%
mutate(Class = "Overall") %>%
select(4, 1:3)
data_summary_overall
# Summarize sample size, average, std deviation by Class
data_summary_section <- data_test1 %>%
group_by(Class) %>%
summarize(Size = n(),
Avg = mean(Test_1),
Std_Dev = sd(Test_1))
data_summary_section
#Combine the summaries into one
data_summaries <- data_summary_overall %>%
full_join(data_summary_section)
data_summaries
#Create a test 1 dataset
data_test1 <- data_long %>%
select(Student, Class, Test_1)
#data_test1
# Summarize sample size, average, std deviation
data_summary_overall <- data_test1 %>%
summarize(Size = n(),
Avg = mean(Test_1),
Std_Dev = sd(Test_1))%>%
mutate(Class = "Overall") %>%
select(4, 1:3)
#data_summary_overall
# Summarize sample size, average, std deviation by Class
data_summary_section <- data_test1 %>%
group_by(Class) %>%
summarize(Size = n(),
Avg = mean(Test_1),
Std_Dev = sd(Test_1))
#data_summary_section
#Combine the summaries into one
data_summaries <- data_summary_overall %>%
full_join(data_summary_section)
data_summaries
View(data_long)
# load packages
library(tidyverse)
library(gapminder)
library(plotly)
library(corrplot)
library(GGally)
library(crosstalk)
library(DT)
library(ggforce)
p <- ggplot(data = diamonds,
aes(x = cut)) +
geom_bar()
ggplotly(p)
p <- ggplot(data = diamonds,
aes(x = cut,
fill = clarity)) +
geom_bar(position = "dodge")
ggplotly(p)
p <- ggplot(data = diamonds,
aes(x = price)) +
geom_histogram() +
facet_grid(cut ~ .,
scales = "free_y")
ggplotly(p)
p <- ggplot(data = diamonds,
aes(x = cut,
y = price)) +
geom_boxplot()
ggplotly(p)
p <- ggplot(data = diamonds,
aes(x = log(carat),
y = log(price))) +
geom_point(alpha = 0.1)
ggplotly(p)
p <- ggplot(data = slice_sample(diamonds, n = 10000),
aes(x = log(carat),
y = log(price))) +
geom_point(alpha = 0.1)
ggplotly(p)
p <- ggplot(data = diamonds,
aes(x = log(carat),
y = log(price))) +
geom_hex()
ggplotly(p)
ggplot(data = diamonds,
aes(x = log(carat),
y = log(price))) +
geom_hex()
ggplot(data = diamonds,
aes(x = log(carat),
y = log(price))) +
geom_hex(bins = 100)
ggplot(data = diamonds,
aes(x = price,
color = clarity)) +
geom_freqpoly()
?gapminder
head(gapminder)
gapminder_recent <- gapminder %>% filter(year == max(years))
gapminder_recent <- gapminder %>% filter(year == max(year))
ggplot(data = gapminder_recent,
aes(x = gdpPercap,
y = lifeExp,
size = pop,
color = continent)) +
geom_point()
gapminder_recent <- gapminder %>% filter(year == max(year))
ggplot(data = gapminder_recent,
aes(x = gdpPercap,
y = lifeExp,
size = pop,
color = continent)) +
geom_point() +
scale_x_continuous(labels = scales::comma)
gapminder_recent <- gapminder %>% filter(year == max(year))
ggplot(data = gapminder_recent,
aes(x = gdpPercap,
y = lifeExp,
size = pop,
color = continent)) +
geom_point() +
scale_x_continuous(labels = scales::comma) +
scale_size_continuous(labels = scales::comma)
gapminder_recent <- gapminder %>% filter(year == max(year))
ggplot(data = gapminder_recent,
aes(x = gdpPercap,
y = lifeExp,
size = pop / 1000000,
color = continent)) +
geom_point() +
scale_x_continuous(labels = scales::comma) +
scale_size_continuous(labels = scales::comma)
gapminder_recent <- gapminder %>% filter(year == max(year))
ggplot(data = gapminder_recent,
aes(x = gdpPercap,
y = lifeExp,
size = pop / 1000000,
color = continent)) +
geom_point() +
scale_x_continuous(labels = scales::comma) +
scale_size_continuous(labels = scales::comma) +
labs(title = "Gapminder 2007",
x = "GDP per capita ($)",
y = "Life expectancy (millions)",
color = "Continent") +
theme_bw()
gapminder_recent <- gapminder %>% filter(year == max(year))
year <- unique(gapminder_recent$year)
ggplot(data = gapminder_recent,
aes(x = gdpPercap,
y = lifeExp,
size = pop / 1000000,
color = continent)) +
geom_point() +
scale_x_continuous(labels = scales::comma) +
scale_size_continuous(labels = scales::comma) +
labs(title = bquote("Gapminder " * .(year)),
x = "GDP per capita ($)",
y = "Life expectancy (millions)",
color = "Continent") +
theme_bw()
gapminder_recent <- gapminder %>% filter(year == max(year))
year <- unique(gapminder_recent$year)
p <- ggplot(data = gapminder_recent,
aes(x = gdpPercap,
y = lifeExp,
size = pop / 1000000,
color = continent)) +
geom_point() +
scale_x_continuous(labels = scales::comma) +
scale_size_continuous(labels = scales::comma) +
labs(title = bquote("Gapminder " * .(year)),
x = "GDP per capita ($)",
y = "Life expectancy (millions)",
color = "Continent") +
theme_bw()
ggplotly(p)
plot_ly(diamonds, x = ~cut)
#plot_ly(diamonds, x = ~cut)
plot_ly(diamonds, x = ~cut, y = ~clarity)
#plot_ly(diamonds, x = ~cut)
#plot_ly(diamonds, x = ~cut, y = ~clarity)
plot_ly(diamonds, x = ~cut, color = ~clarity)
plot_ly(diamonds, x = ~cut, color = ~clarity,
colors = "Accent")
#plot_ly(diamonds, x = ~cut, color = ~clarity, colors = "Accent")
plot_ly(diamonds, x = ~cut, color = ~clarity, colors = c("red", "green", "yellow", "purple"))
plot_ly(diamonds, x = ~cut, color = ~clarity, color = I("red"))
plot_ly(diamonds, x = ~cut, color = ~clarity, colors = I("red"))
plot_ly(diamonds, x = ~cut, color = ~clarity, color = I("red"))
plot_ly(diamonds, x = ~cut, color = ~clarity, color = I("red"))
layout(
plot_ly(diamonds, x = ~cut),
title = "Histogram"
)
layout(
plot_ly(diamonds, x = ~cut),
title = "My Histogram"
)
layout(
plot_ly(diamonds, x = ~cut),
title = "My Histogram"
)
plot_ly(diamonds, x = ~cut) %>% layout(title = "My Histogram")
diamonds %>%
plot_ly() %>%
add_histogram(x = ~cut)
diamonds %>%
plot_ly() %>%
add_histogram(x = ~cut) %>%
#plotly_data()
group_by(cut) %>%
summarize(n = n()) %>%
plotly_data()
diamonds %>%
plot_ly(x = ~cut) %>%
add_histogram() %>%
#plotly_data()
group_by(cut) %>%
summarize(n = n()) %>%
add_text(text = ~n,
y = ~n,
textposition = "top middle")
# load packages
library(tidyverse)
library(plotly)
# load data
data_madden <- read_csv(file = "madden-23.csv")
# preview data
head(data_madden)
p <- ggplot(data = data_madden,
aes(x = overall_rating,
y = totalSalary)) +
geom_point(alpha = 0.1)
ggplotly(p)
p <- ggplot(data = data_madden,
aes(x = overall_rating,
y = totalSalary/1000000)) +
geom_point(alpha = 0.1)
ggplotly(p)
p <- ggplot(data = data_madden,
aes(x = overall_rating,
y = totalSalary/1000000)) +
geom_point(alpha = 0.1) +
labs(title = "Overall Rating vs Salary",
x = "Overall Rating",
y = "Total Salary (millions)")
ggplotly(p)
p <- ggplot(data = data_madden,
aes(x = overall_rating,
y = yearsPro)) +
geom_histogram()
ggplotly(p)
p <- ggplot(data = data_madden,
aes(x = overall_rating,
y = yearsPro)) +
geom_bar()
ggplotly(p)
p <- ggplot(data = data_madden,
aes(x = overall_rating,
y = yearsPro)) +
geom_point()
ggplotly(p)
p <- ggplot(data = data_madden,
aes(x = yearsPro,
y = overall_rating)) +
geom_point()
ggplotly(p)
View(data_madden)
View(data_madden)
p <- ggplot(data = data_madden,
aes(x = yearsPro,
y = injury_rating)) +
geom_point()
ggplotly(p)
p <- ggplot(data = data_madden,
aes(x = yearsPro,
y = injury_rating)) +
geom_point() +
labs(title = "Years Pro vs Injury Rating",
x = "Years Pro",
y = "Injury Rating")
ggplotly(p)
p <- ggplot(data = data_madden,
aes(x = yearsPro,
y = injury_rating)) +
geom_point() +
labs(title = "Years Pro vs Injury Rating",
x = "Years Pro",
y = "Injury Rating")
ggplotly(p)
library(shiny); runApp('BSU/2022-23/Fall 2023/DANA 320/Group Shiny Project/code/spotify-shiny/spotify-shiny.R')
install.packages("devtools") # needed for the following function
devtools::install_github("rstudio/shinyuieditor")
# load packages
library(tidyverse)
# load data
data_music <- read.csv(file = "shuffled-playlist.csv")
# preview data
#head(data_music)
#replace + with space in artist names
data_music <- data_music %>%
mutate(artist = str_replace_all(
string = artist, pattern =  "\\+", replacement = " "))
#Determine the number of rows in the dataset
n_rows <- data_music %>% summarize(n())
print(paste("There are", n_rows, "rows in the dataset."))
#song that has the highest valence score
data_music  %>% filter(valence == max(valence)) %>%
select(where(is.character))
#find avg energy for hip hop
hh_energy <- data_music  %>% filter(genre == "hip hop") %>%
summarize(mean(energy))
print(paste("The average energy for hip hop songs is:", round(hh_energy,3)))
#find percent of songs by Dessa
Dessa_songs <- data_music  %>% filter(artist == "Dessa") %>%
summarize(sum(n()))
print(paste(round((Dessa_songs/n_rows)*100,1), "percent of songs are by Dessa"))
#average energy, tempo, loudness saved to variables
avg_energy <- data_music  %>% summarize(mean(energy))
avg_tempo <- data_music  %>% summarize(mean(tempo))
avg_loudness <- data_music  %>% summarize(mean(loudness))
#use across function to get averages
data_music %>% summarize(.by = genre,
across(c(energy, tempo, loudness), mean))
#use across to calculate the mean of all numeric variables by genre
data_music %>% summarize(.by = genre,
across(where(is.numeric), mean))
#pop song that has the highest danceability score
data_music  %>% filter(danceability == max(danceability)) %>%
select(where(is.character))
#filter Adele songs, find the one that has min energy and return the song title
Adele_slow <- data_music  %>% filter(artist == "Adele") %>%
filter(energy == min(energy)) %>%
select(name)
print(paste("The Adele song that has the lowest energy is called", Adele_slow))
#average the acousticness by each artist & genre, sort by it, and return the top in each genre
low_acoustic <- data_music %>% summarize(.by = c(genre, artist),
across(acousticness, mean)) %>%
arrange(genre, acousticness) %>%
distinct(genre, .keep_all = TRUE)
low_acoustic
#create dataframe of only hip hop songs
hip_hop <- data_music %>% filter(genre == "hip hop")
#create bar graph
ggplot(data = hip_hop,
aes(x = fct_infreq(artist))) + #make Pareto
geom_bar() + #bar type graph
labs(title = "Number of Songs by Artist", #descriptive labels
x = "Artist",
y = "Count") +
ylim(0,15) + #manual limits for y axis
geom_text(stat = "count", #add count above each bar
aes(x = artist,
label = after_stat(count)),
vjust = -1) +
theme_set(theme_bw()) #sets theme for whole document
#Find number of songs per artist in descending order and only keep top 3
song_count <- data_music %>% mutate(.by = artist, tot_songs = n(),
.keep = "all") %>%
arrange(-tot_songs) %>%
distinct(artist, .keep_all = TRUE) %>%
head(3)
#create scatterplot
ggplot(data = song_count) +
geom_point(aes(x = speechiness,
y = liveness)) +
labs(title = "Speechiness vs Liveness for Most Active Songwriters", #descriptive labels
x = "Speechiness",
y = "Liveness")
#Create dataframe of only ska bands
ska_tempos <- data_music %>% filter(genre == "ska")
#create boxplot
ggplot(data = ska_tempos,
aes(x = tempo)) +
labs(title = "Tempos of Ska Bands", #descriptive labels
x = "Tempo") +
geom_boxplot() + #box plot graph
facet_wrap(~artist,
ncol = 1)
#Find number of songs per artist in descending order and only keep top 3
sleep_song <- data_music %>% filter(genre == c("classic rock", "pop")) %>%
mutate(.by = name, sleepability = energy + loudness,
.keep = "all") %>%
arrange(sleepability) %>%
head(1)
sleep_song_name <- sleep_song %>% select(name)
sleep_song_artist <- sleep_song %>% select(artist)
print(paste("The best song to fall asleep to is", sleep_song_name, "by", sleep_song_artist))
#Find number of songs per artist in descending order and only keep top 3
classic_rock <- data_music %>% filter(genre == "classic rock")
#create scatterplot
ggplot(data = classic_rock) +
geom_point(aes(x = energy,
y = loudness)) +
labs(title = "Energy vs Loudness for Classic Rock Songs", #descriptive labels
x = "Energy Level",
y = "Loudness") +
geom_smooth(aes(x = energy,
y = loudness),
method = "lm",
se = TRUE,
color = "red")
#Find number of songs per artist in descending order and only keep top 3
classic_rock <- data_music %>% filter(genre == "classic rock")
#create scatterplot
ggplot(data = classic_rock) +
geom_point(aes(x = energy,
y = loudness)) +
labs(title = "Energy vs Loudness", #descriptive labels
x = "Energy Level",
y = "Loudness") +
geom_smooth(aes(x = energy,
y = loudness))
#Find number of songs per artist in descending order and only keep top 3
classic_rock <- data_music %>% filter(genre == "classic rock")
#create scatterplot
ggplot(data = classic_rock) +
geom_point(aes(x = energy,
y = loudness)) +
labs(title = "Energy vs Loudness", #descriptive labels
x = "Energy Level",
y = "Loudness")
classic_rock <- data_music %>% filter(genre == "classic rock")
#create scatterplot
ggplot(data = classic_rock) +
geom_point(aes(x = tempo,
y = loudness)) +
labs(title = "Energy vs Loudness", #descriptive labels
x = "Energy Level",
y = "Loudness")
library(shiny); runApp('BSU/2022-23/Fall 2023/DANA 320/Group Shiny Project/code/spotify-shiny/spotify-shiny.R')
runApp('BSU/2022-23/Fall 2023/DANA 320/Group Shiny Project/code/spotify-shiny/spotify-shiny.R')
library(dplyr)
source("~/BSU/2022-23/Fall 2023/DANA 320/Group Shiny Project/code/spotify-shiny/spotify-shiny.R", echo=TRUE)
setwd("~/BSU/2022-23/Fall 2023/DANA 320/Group Shiny Project/code/spotify-shiny")
source("~/BSU/2022-23/Fall 2023/DANA 320/Group Shiny Project/code/spotify-shiny/spotify-shiny.R", echo=TRUE)
load("/spotify_app/data-music.RData")
load("data-music.RData")
ggplot(data = data_music) +
geom_point(aes(x = energy,
y = loudness)) +
labs(title = "Energy vs Loudness for Top Artists", #descriptive labels
x = "Energy Level",
y = "Loudness")
View(data_music)
