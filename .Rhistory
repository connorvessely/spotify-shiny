avg_tempo <- data_music  %>% summarize(mean(tempo))
avg_loudness <- data_music  %>% summarize(mean(loudness))
#use across function to get averages
data_music %>% summarize(.by = genre,
across(c(energy, tempo, loudness), mean))
#use across to calculate the mean of all numeric variables by genre
data_music %>% summarize(.by = genre,
across(where(is.numeric), mean))
#pop song that has the highest danceability score
data_music  %>% filter(danceability == max(danceability)) %>%
select(where(is.character))
#filter Adele songs, find the one that has min energy and return the song title
Adele_slow <- data_music  %>% filter(artist == "Adele") %>%
filter(energy == min(energy)) %>%
select(name)
print(paste("The Adele song that has the lowest energy is called", Adele_slow))
#average the acousticness by each artist & genre, sort by it, and return the top in each genre
low_acoustic <- data_music %>% summarize(.by = c(genre, artist),
across(acousticness, mean)) %>%
arrange(genre, acousticness) %>%
distinct(genre, .keep_all = TRUE)
low_acoustic
#create dataframe of only hip hop songs
hip_hop <- data_music %>% filter(genre == "hip hop")
#create bar graph
ggplot(data = hip_hop,
aes(x = fct_infreq(artist))) + #make Pareto
geom_bar() + #bar type graph
labs(title = "Number of Songs by Artist", #descriptive labels
x = "Artist",
y = "Count") +
ylim(0,15) + #manual limits for y axis
geom_text(stat = "count", #add count above each bar
aes(x = artist,
label = after_stat(count)),
vjust = -1) +
theme_set(theme_bw()) #sets theme for whole document
#Find number of songs per artist in descending order and only keep top 3
song_count <- data_music %>% mutate(.by = artist, tot_songs = n(),
.keep = "all") %>%
arrange(-tot_songs) %>%
distinct(artist, .keep_all = TRUE) %>%
head(3)
#create scatterplot
ggplot(data = song_count) +
geom_point(aes(x = speechiness,
y = liveness)) +
labs(title = "Speechiness vs Liveness for Most Active Songwriters", #descriptive labels
x = "Speechiness",
y = "Liveness")
#Create dataframe of only ska bands
ska_tempos <- data_music %>% filter(genre == "ska")
#create boxplot
ggplot(data = ska_tempos,
aes(x = tempo)) +
labs(title = "Tempos of Ska Bands", #descriptive labels
x = "Tempo") +
geom_boxplot() + #box plot graph
facet_wrap(~artist,
ncol = 1)
#Find number of songs per artist in descending order and only keep top 3
sleep_song <- data_music %>% filter(genre == c("classic rock", "pop")) %>%
mutate(.by = name, sleepability = energy + loudness,
.keep = "all") %>%
arrange(sleepability) %>%
head(1)
sleep_song_name <- sleep_song %>% select(name)
sleep_song_artist <- sleep_song %>% select(artist)
print(paste("The best song to fall asleep to is", sleep_song_name, "by", sleep_song_artist))
#Find number of songs per artist in descending order and only keep top 3
classic_rock <- data_music %>% filter(genre == "classic rock")
#create scatterplot
ggplot(data = classic_rock) +
geom_point(aes(x = energy,
y = loudness)) +
labs(title = "Energy vs Loudness for Classic Rock Songs", #descriptive labels
x = "Energy Level",
y = "Loudness") +
geom_smooth(aes(x = energy,
y = loudness),
method = "lm",
se = TRUE,
color = "red")
#Find number of songs per artist in descending order and only keep top 3
classic_rock <- data_music %>% filter(genre == "classic rock")
#create scatterplot
ggplot(data = classic_rock) +
geom_point(aes(x = energy,
y = loudness)) +
labs(title = "Energy vs Loudness", #descriptive labels
x = "Energy Level",
y = "Loudness") +
geom_smooth(aes(x = energy,
y = loudness))
#Find number of songs per artist in descending order and only keep top 3
classic_rock <- data_music %>% filter(genre == "classic rock")
#create scatterplot
ggplot(data = classic_rock) +
geom_point(aes(x = energy,
y = loudness)) +
labs(title = "Energy vs Loudness", #descriptive labels
x = "Energy Level",
y = "Loudness")
classic_rock <- data_music %>% filter(genre == "classic rock")
#create scatterplot
ggplot(data = classic_rock) +
geom_point(aes(x = tempo,
y = loudness)) +
labs(title = "Energy vs Loudness", #descriptive labels
x = "Energy Level",
y = "Loudness")
source("~/BSU/2022-23/Fall 2023/DANA 320/Group Shiny Project/code/spotify-shiny/spotify-shiny.R", echo=TRUE)
#test area here:
load("data-music.RData")
setwd("~/BSU/2022-23/Fall 2023/DANA 320/Group Shiny Project/code/spotify-shiny")
#test area here:
load("data-music.RData")
#use across to calculate the mean of all numeric variables by genre and keep top 10
artist_stats <- data_music %>% summarize(.by = artist,
across(popularity, mean)) %>%
arrange(-tot_songs) %>%
distinct(artist, .keep_all = TRUE) %>%
head(10)
#test area here:
load("data-music.RData")
#use across to calculate the mean of all numeric variables by genre and keep top 10
artist_stats <- data_music %>% summarize(.by = artist_name,
across(popularity, mean)) %>%
arrange(-tot_songs) %>%
distinct(artist_name, .keep_all = TRUE) %>%
head(10)
#test area here:
load("data-music.RData")
#use across to calculate the mean of all numeric variables by genre and keep top 10
artist_stats <- data_music %>% summarize(.by = artist_name,
across(popularity, mean)) %>%
arrange(-popularity) %>%
distinct(artist_name, .keep_all = TRUE) %>%
head(10)
#create scatterplot
ggplot(data = artist_stats) +
geom_point(aes(x = energy,
y = loudness)) +
labs(title = "Energy vs Loudness for Top Artists",
x = "Energy Level",
y = "Loudness")
View(artist_stats)
View(artist_stats)
#test area here:
load("data-music.RData")
#use across to calculate the mean of all numeric variables by genre and keep top 10
artist_stats <- data_music %>% summarize(.by = c(genre, artist_name),
across(popularity, mean)) %>%
arrange(-popularity) %>%
head(10)
#create scatterplot
ggplot(data = artist_stats) +
geom_point(aes(x = energy,
y = loudness)) +
labs(title = "Energy vs Loudness for Top Artists",
x = "Energy Level",
y = "Loudness")
View(artist_stats)
View(artist_stats)
#test area here:
load("data-music.RData")
#use across to calculate the mean of all numeric variables by genre and keep top 10
artist_stats <- data_music %>% summarize(.by = artist_name,
across(where(is.numeric), mean)) %>%
arrange(-popularity) %>%
distinct(artist_name, .keep_all = TRUE) %>%
head(10)
#create scatterplot
ggplot(data = artist_stats) +
geom_point(aes(x = energy,
y = loudness)) +
labs(title = "Energy vs Loudness for Top Artists",
x = "Energy Level",
y = "Loudness")
#create boxplot
ggplot(data = artist_stats,
aes(x = tempo)) +
labs(title = "Boxplot of features",
x = "Tempo") +
geom_boxplot() +
facet_wrap(~artist_name,
ncol = 1)
#create boxplot
top_n(5) %>%
ggplot(data = artist_stats,
aes(x = tempo)) +
labs(title = "Boxplot of features",
x = "Tempo") +
geom_boxplot() +
facet_wrap(~artist_name,
ncol = 1)
#create boxplot
top_n(5, popularity) %>%
ggplot(data = artist_stats,
aes(x = tempo)) +
labs(title = "Boxplot of features",
x = "Tempo") +
geom_boxplot() +
facet_wrap(~artist_name,
ncol = 1)
#test area here:
load("data-music.RData")
slider_val <- 10
#use across to calculate the mean of all numeric variables by genre and keep top 10
artist_stats <- data_music %>% summarize(.by = artist_name,
across(where(is.numeric), mean)) %>%
arrange(-popularity) %>%
distinct(artist_name, .keep_all = TRUE) %>%
slice_head(slider_val)
#test area here:
load("data-music.RData")
slider_val <- 10
#use across to calculate the mean of all numeric variables by genre and keep top n based on slider value
artist_stats <- data_music %>% summarize(.by = artist_name,
across(where(is.numeric), mean)) %>%
arrange(-popularity) %>%
distinct(artist_name, .keep_all = TRUE) %>%
slice_head(n=slider_val)
#Grab top 5 artists for boxplot only
top_five <- data_music %>% summarize(.by = artist_name,
across(where(is.numeric), mean)) %>%
arrange(-popularity) %>%
distinct(artist_name, .keep_all = TRUE) %>%
slice_head(n=5)
#create scatterplot
ggplot(data = artist_stats) +
geom_point(aes(x = energy,
y = loudness)) +
labs(title = "Energy vs Loudness for Top Artists",
x = "Energy Level",
y = "Loudness")
#create boxplot
ggplot(data = top_five,
aes(x = tempo)) +
labs(title = "Top 5 Artists based on features",
x = "Tempo") +
geom_boxplot() +
facet_wrap(~artist_name,
ncol = 1)
ggplot(data = top_five,
aes(x = tempo)) +
labs(title = "Top 5 Artists based on features",
x = "Tempo") +
geom_boxplot() +
facet_wrap(~artist_name,
ncol = 1)
ggplot(data = top_five,
aes(x = tempo)) +
labs(title = "Top 5 Artists based on features",
x = "Tempo") +
geom_boxplot() +
facet_wrap(~artist_name,
ncol = 2)
View(top_five)
load("data-music.RData")
slider_val <- 10
#use across to calculate the mean of all numeric variables by genre and keep top n based on slider value
artist_stats <- data_music %>% summarize(.by = artist_name,
across(where(is.numeric), mean)) %>%
arrange(-popularity) %>%
distinct(artist_name, .keep_all = TRUE) %>%
slice_head(n=slider_val)
#Grab top 5 artists for boxplot only
top_five <- data_music %>%
arrange(-popularity) %>%
distinct(artist_name, .keep_all = TRUE) %>%
slice_head(n=5)
#create scatterplot
ggplot(data = artist_stats) +
geom_point(aes(x = energy,
y = loudness)) +
labs(title = "Energy vs Loudness for Top Artists",
x = "Energy Level",
y = "Loudness")
#create boxplot
ggplot(data = top_five,
aes(x = tempo)) +
labs(title = "Top 5 Artists based on features",
x = "Tempo") +
geom_boxplot() +
facet_wrap(~artist_name,
ncol = 1)
View(top_five)
#test area here:
load("data-music.RData")
slider_val <- 10
#use across to calculate the mean of all numeric variables by genre and keep top n based on slider value
artist_stats <- data_music %>% summarize(.by = artist_name,
across(where(is.numeric), mean)) %>%
arrange(-popularity) %>%
distinct(artist_name, .keep_all = TRUE) %>%
slice_head(n=slider_val)
#Grab top 5 artists for boxplot only
topFiveList <- data_music %>% filter(artist_name %in% slice_head(artist_stats, 5))
#test area here:
load("data-music.RData")
slider_val <- 10
#use across to calculate the mean of all numeric variables by genre and keep top n based on slider value
artist_stats <- data_music %>% summarize(.by = artist_name,
across(where(is.numeric), mean)) %>%
arrange(-popularity) %>%
distinct(artist_name, .keep_all = TRUE) %>%
slice_head(n=slider_val)
#Grab top 5 artists for boxplot only
topFiveList <- data_music %>% filter(artist_name %in% slice_head(5))
load("data-music.RData")
slider_val <- 10
#use across to calculate the mean of all numeric variables by genre and keep top n based on slider value
artist_stats <- data_music %>% summarize(.by = artist_name,
across(where(is.numeric), mean)) %>%
arrange(-popularity) %>%
distinct(artist_name, .keep_all = TRUE) %>%
slice_head(n=slider_val)
#Grab top 5 artists for boxplot only
topFiveList <- data_music %>% filter(artist_name %in% slice_max(5))
#test area here:
load("data-music.RData")
slider_val <- 10
#use across to calculate the mean of all numeric variables by genre and keep top n based on slider value
artist_stats <- data_music %>% summarize(.by = artist_name,
across(where(is.numeric), mean)) %>%
arrange(-popularity) %>%
distinct(artist_name, .keep_all = TRUE) %>%
slice_head(n=slider_val)
#Grab top 5 artists for boxplot only
topFiveList <- data_music %>% filter(artist_name %in% top_n(5))
#test area here:
load("data-music.RData")
slider_val <- 10
#use across to calculate the mean of all numeric variables by genre and keep top n based on slider value
artist_stats <- data_music %>% summarize(.by = artist_name,
across(where(is.numeric), mean)) %>%
arrange(-popularity) %>%
distinct(artist_name, .keep_all = TRUE) %>%
slice_head(n=slider_val)
#Grab top 5 artists for boxplot only
topFiveList <- data_music %>% filter(artist_name %in% top_n(artist_stats, 5))
#create scatterplot
ggplot(data = artist_stats) +
geom_point(aes(x = energy,
y = loudness)) +
labs(title = "Energy vs Loudness for Top Artists",
x = "Energy Level",
y = "Loudness")
#create boxplot
ggplot(data = top_five,
aes(x = tempo)) +
labs(title = "Top 5 Artists based on features",
x = "Tempo") +
geom_boxplot() +
facet_wrap(~artist_name,
ncol = 1)
View(topFiveList)
View(artist_stats)
#test area here:
load("data-music.RData")
slider_val <- 10
#use across to calculate the mean of all numeric variables by genre and keep top n based on slider value
artist_stats <- data_music %>% summarize(.by = artist_name,
across(where(is.numeric), mean)) %>%
arrange(-popularity) %>%
distinct(artist_name, .keep_all = TRUE) %>%
slice_head(n=slider_val)
#Grab top 5 artists for boxplot only
topFiveList <- data_music %>% filter(artist_name %in% slice_max(artist_stats, popularity, 5))
#test area here:
load("data-music.RData")
slider_val <- 10
#use across to calculate the mean of all numeric variables by genre and keep top n based on slider value
artist_stats <- data_music %>% summarize(.by = artist_name,
across(where(is.numeric), mean)) %>%
arrange(-popularity) %>%
distinct(artist_name, .keep_all = TRUE) %>%
slice_head(n=slider_val)
#Grab top 5 artists for boxplot only
topFiveList <- data_music %>% filter(artist_name %in% slice_max(artist_stats, popularity, n=5))
#create scatterplot
ggplot(data = artist_stats) +
geom_point(aes(x = energy,
y = loudness)) +
labs(title = "Energy vs Loudness for Top Artists",
x = "Energy Level",
y = "Loudness")
#create boxplot
ggplot(data = top_five,
aes(x = tempo)) +
labs(title = "Top 5 Artists based on features",
x = "Tempo") +
geom_boxplot() +
facet_wrap(~artist_name,
ncol = 1)
#test area here:
load("data-music.RData")
slider_val <- 10
#use across to calculate the mean of all numeric variables by genre and keep top n based on slider value
artist_stats <- data_music %>% summarize(.by = artist_name,
across(where(is.numeric), mean)) %>%
arrange(-popularity) %>%
distinct(artist_name, .keep_all = TRUE) %>%
slice_head(n=slider_val)
#Grab top 5 artists for boxplot only
topFiveList <- data_music %>% filter(artist_name %in% slice_max(popularity, n=5))
load("data-music.RData")
slider_val <- 10
#use across to calculate the mean of all numeric variables by genre and keep top n based on slider value
artist_stats <- data_music %>% summarize(.by = artist_name,
across(where(is.numeric), mean)) %>%
arrange(-popularity) %>%
distinct(artist_name, .keep_all = TRUE) %>%
slice_head(n=slider_val)
topFiveList <- artist_stats %>%
distinct(artist_name, .keep_all = TRUE) %>%
head(5)
#Grab top 5 artists for boxplot only
top_five <- data_music %>% filter(artist_name %in% topFiveList)
#create scatterplot
ggplot(data = artist_stats) +
geom_point(aes(x = energy,
y = loudness)) +
labs(title = "Energy vs Loudness for Top Artists",
x = "Energy Level",
y = "Loudness")
#create boxplot
ggplot(data = top_five,
aes(x = tempo)) +
labs(title = "Top 5 Artists based on features",
x = "Tempo") +
geom_boxplot() +
facet_wrap(~artist_name,
ncol = 1)
View(topFiveList)
View(top_five)
#test area here:
load("data-music.RData")
slider_val <- 10
#use across to calculate the mean of all numeric variables by genre and keep top n based on slider value
artist_stats <- data_music %>% summarize(.by = artist_name,
across(where(is.numeric), mean)) %>%
arrange(-popularity) %>%
distinct(artist_name, .keep_all = TRUE) %>%
slice_head(n=slider_val)
topFiveList <- artist_stats %>%
head(5)
#Grab top 5 artists for boxplot only
top_five <- data_music %>% filter(artist_name %in% topFiveList)
#create scatterplot
ggplot(data = artist_stats) +
geom_point(aes(x = energy,
y = loudness)) +
labs(title = "Energy vs Loudness for Top Artists",
x = "Energy Level",
y = "Loudness")
#create boxplot
ggplot(data = top_five,
aes(x = tempo)) +
labs(title = "Top 5 Artists based on features",
x = "Tempo") +
geom_boxplot() +
facet_wrap(~artist_name,
ncol = 1)
#test area here:
load("data-music.RData")
slider_val <- 10
#use across to calculate the mean of all numeric variables by genre and keep top n based on slider value
artist_stats <- data_music %>% summarize(.by = artist_name,
across(where(is.numeric), mean)) %>%
arrange(-popularity) %>%
distinct(artist_name, .keep_all = TRUE) %>%
slice_head(n=slider_val)
topFiveList <- artist_stats %>%
head(5)
#Grab top 5 artists for boxplot only
top_five <- data_music %>% filter(artist_name %in% topFiveList)
View(topFiveList)
#Grab top 5 artists for boxplot only
top_five <- data_music %>% filter(artist_name %in% topFiveList$artist_name)
View(top_five)
#Grab top 5 artists for boxplot only
top_five <- data_music %>% filter(artist_name %in% topFiveList$artist_name) %>%
distinct(track_name, .keep_all = TRUE)
View(top_five)
#create scatterplot
ggplot(data = artist_stats) +
geom_point(aes(x = energy,
y = loudness)) +
labs(title = "Energy vs Loudness for Top Artists",
x = "Energy Level",
y = "Loudness")
#create boxplot
ggplot(data = top_five,
aes(x = tempo)) +
labs(title = "Top 5 Artists based on features",
x = "Tempo") +
geom_boxplot() +
facet_wrap(~artist_name,
ncol = 1)
#create boxplot
ggplot(data = top_five,
aes(x = tempo)) +
labs(title = "Top 5 Artists based on features",
x = "Tempo") +
geom_boxplot() +
facet_wrap(~popularity,
ncol = 1)
source("~/.active-rstudio-document", echo=TRUE)
runApp('spotify-shiny.R')
runApp('spotify-shiny.R')
